---

version: "3.3"
services:
  duckdns:
    image: linuxserver/duckdns
    environment:
      - TZ=${TZ}
      - SUBDOMAINS=${DOMAIN_NAMES}
      - TOKEN=${DOMAIN_TOKEN}
      - LOG_FILE=false
    restart: unless-stopped

  traefik:
    image: traefik:v2.2
    ports:
      - "10443:443"
      - "8080:8080"  # internal dashboard
    environment:
      TRAEFIK_ENTRYPOINTS_WEBSECURE: "true"
      TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS: ":443"
      TRAEFIK_API: "true"
      TRAEFIK_API_DASHBOARD: "true"
      TRAEFIK_API_INSECURE: "true"
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL: ${ACME_EMAIL}
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_STORAGE: "/letsencrypt/acme.json"
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_TLSCHALLENGE: "true"
      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_DNSCHALLENGE_PROVIDER: "duckdns"
      DUCKDNS_TOKEN: ${DOMAIN_TOKEN}
      TRAEFIK_PROVIDERS_DOCKER: "true"
      TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT: "false"
      TRAEFIK_PROVIDERS_FILE_DIRECTORY: "/etc/traefik/dynamic/"
    volumes:
      - ${ROOT_DATA}/letsencrypt:/letsencrypt
      - ${ROOT_DATA}/traefik:/etc/traefik
      - "/var/run/docker.sock:/var/run/docker.sock"
    labels:
      traefik.enable: "true"
      traefik.http.middlewares.secured.chain.middlewares: "auth-users, test-ratelimit"
      traefik.http.middlewares.auth-users.basicauth.users: "${BASIC_AUTH}"
      traefik.http.middlewares.known-ips.ipwhitelist.sourceRange: "${WHITELIST_RANGE}"
      traefik.http.middlewares.test-ratelimit.ratelimit.average: "100"
      traefik.http.middlewares.test-ratelimit.ratelimit.burst: "100"
      traefik.http.routers.hass.rule: "Host(`${HOME_DOMAIN}`)"
      traefik.http.routers.hass.service: "hass@file"
      traefik.http.routers.hass.entrypoints: "websecure"
      traefik.http.routers.hass.tls: "true"
      traefik.http.routers.hass.tls.certresolver: "letsencrypt"
      traefik.http.routers.hass.tls.domains[0].main: "${HOME_DOMAIN}"
      traefik.http.routers.hass.tls.domains[0].sans: "*.${HOME_DOMAIN}"
    restart: unless-stopped

  pihole:
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "80:80/tcp"
      - "443:443/tcp"
    environment:
      TZ: 'America/Chicago'
      # WEBPASSWORD: 'set a secure password here or it will be random'
    # Volumes store your data between container upgrades
    volumes:
      - ${ROOT_DATA}/pihole:/etc/pihole/
      - ${ROOT_DATA}/dnsmasq:/etc/dnsmasq.d/
    dns:
      - 127.0.0.1
      - 1.1.1.1
    # Recommended but not required (DHCP needs NET_ADMIN)
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN
    restart: unless-stopped

  influxdb:
    image: influxdb:1.8-alpine
    volumes:
      - ${ROOT_DATA}/influxdb:/var/lib/influxdb
    ports:
      - "8086:8086"
    restart: unless-stopped

  telegraf:
    image: telegraf:1.12-alpine
    links:
      - influxdb
    ports:
      - "6514:6514"
    environment:
      HOST_PROC: /rootfs/proc
    volumes:
      - ${ROOT_DATA}/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc:/rootfs/proc:ro
    depends_on:
      - influxdb
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    volumes:
      - '${ROOT_DATA}/grafana/var:/var/lib/grafana'
      - '${ROOT_DATA}/grafana/provisioning:/etc/grafana/provisioning'
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_AUTH_ANONYMOUS_ORG_NAME: "sillyhome"
      GF_AUTH_BASIC_ENABLED: "false"
      GF_INSTALL_PLUGINS: ""
      HASS_INFLUXDB_PASSWORD: ${HASS_INFLUXDB_PASSWORD}
    labels:
      traefik.enable: "true"
      traefik.http.routers.grafana.entrypoints: "websecure"
      traefik.http.routers.grafana.rule: "Host(`grafana.${HOME_DOMAIN}`)"
      traefik.http.routers.grafana.middlewares: "secured"
      traefik.http.routers.grafana.tls: "true"
    user: "1000"

  sonarr:
    image: linuxserver/sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - UMASK_SET=022  # optional
    volumes:
      - ${ROOT_DATA}/sonarr:/config
      - ${ROOT_MEDIAS}:/data
    ports:
      - 8989:8989
    labels:
      traefik.enable: "true"
      traefik.http.routers.sonarr.entrypoints: "websecure"
      traefik.http.routers.sonarr.rule: "Host(`sonarr.${HOME_DOMAIN}`)"
      traefik.http.routers.sonarr.middlewares: "secured"
      traefik.http.routers.sonarr.tls: "true"
    restart: unless-stopped


  radarr:
    image: linuxserver/radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - UMASK_SET=022  # optional
    volumes:
      - ${ROOT_DATA}/radarr:/config
      - ${ROOT_MEDIAS}:/data
    ports:
      - 7878:7878
    labels:
      traefik.enable: "true"
      traefik.http.routers.radarr.entrypoints: "websecure"
      traefik.http.routers.radarr.rule: "Host(`radarr.${HOME_DOMAIN}`)"
      traefik.http.routers.radarr.middlewares: "secured"
      traefik.http.routers.radarr.tls: "true"
    restart: unless-stopped

  jackett:
    image: linuxserver/jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - RUN_OPTS=run options here  # optional
    volumes:
      - ${ROOT_DATA}/jackett:/config
      - ${ROOT_MEDIAS}:/data
    labels:
      traefik.enable: "true"
      traefik.http.routers.jackett.entrypoints: "websecure"
      traefik.http.routers.jackett.rule: "Host(`jackett.${HOME_DOMAIN}`)"
      traefik.http.routers.jackett.middlewares: "secured"
      traefik.http.routers.jackett.tls: "true"
    restart: unless-stopped

  transmission:
    image: linuxserver/transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT_DATA}/transmission:/config
      - ${ROOT_MEDIAS}:/data
    ports:
      - 9091:9091
    labels:
      traefik.enable: "true"
      traefik.http.routers.transmission.entrypoints: "websecure"
      traefik.http.routers.transmission.rule: "Host(`transmission.${HOME_DOMAIN}`)"
      traefik.http.routers.transmission.middlewares: "secured"
      traefik.http.routers.transmission.tls: "true"
    restart: unless-stopped

  jellyfin:
    image: jellyfin/jellyfin
    volumes:
      - ${ROOT_DATA}/jellyfin/config:/config
      - ${ROOT_DATA}/jellyfin/cache:/cache
      - ${ROOT_MEDIAS}:/media
    ports:
      - 8096:8096
    labels:
      traefik.enable: "true"
      traefik.http.routers.jellyfin.entrypoints: "websecure"
      traefik.http.routers.jellyfin.rule: "Host(`jellyfin.${HOME_DOMAIN}`)"
      # traefik.http.routers.jellyfin.middlewares: "secured"
      traefik.http.routers.jellyfin.tls: "true"
    devices:
      - /dev/dri:/dev/dri
    restart: unless-stopped

  bazarr:
    image: linuxserver/bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT_DATA}/bazarr/config:/config
      - ${ROOT_MEDIAS}:/data
    labels:
      traefik.enable: "true"
      traefik.http.routers.bazarr.entrypoints: "websecure"
      traefik.http.routers.bazarr.rule: "Host(`bazarr.${HOME_DOMAIN}`)"
      traefik.http.routers.bazarr.middlewares: "secured"
      traefik.http.routers.bazarr.tls: "true"
    restart: unless-stopped


  homeassistant:
    image: homeassistant/home-assistant:stable
    volumes:
      - ${ROOT_DATA}/homeassistant/:/config
    network_mode: host
    environment:
      - TZ=${TZ}
    depends_on:
      - telegraf
    restart: unless-stopped

  mosquitto:
    image: eclipse-mosquitto
    expose:
      - "1883"
      - "9001"
    ports:
      - "1883:1883"
      - "9001:9001"
    restart: unless-stopped

  zigbee2mqtt:
    image: koenkk/zigbee2mqtt
    volumes:
      - ${ROOT_DATA}/zigbee2mqtt/:/app/data
      - /run/udev:/run/udev:ro
    devices:
      - /dev/ttyACM0:/dev/ttyACM0
    restart: unless-stopped
    depends_on:
      - mosquitto
    privileged: true
    environment:
      - TZ=${TZ}

  zigbee2mqttassistant:
    ports:
      - '8880:80'
    environment:
      - Z2MA_SETTINGS__MQTTSERVER=mosquitto
    image: carldebilly/zigbee2mqttassistant

  mi-scale:
    image: lolouk44/xiaomi-mi-scale:latest
    restart: unless-stopped

    network_mode: host
    privileged: true

    environment:
      - TZ=${TZ}
      - MISCALE_MAC=C3:B3:42:7B:96:3D # Mac address of your scale
      - MQTT_HOST=127.0.0.1  # MQTT Server (defaults to 127.0.0.1)
      - MQTT_PREFIX=miScale

      - USER1_GT=80            # If the weight is greater than this number, we'll assume that we're weighing User #1
      - USER1_SEX=male
      - USER1_NAME=bruno         # Name of the user
      - USER1_HEIGHT=180       # Height (in cm) of the user
      - USER1_DOB=${BRUNO_DOB}   # DOB (in yyyy-mm-dd format)

      - USER2_LT=35            # If the weight is less than this number, we'll assume that we're weighing User #2
      - USER2_SEX=female
      - USER2_NAME=lise      # Name of the user
      - USER2_HEIGHT=95        # Height (in cm) of the user
      - USER2_DOB=${LISE_DOB}   # DOB (in yyyy-mm-dd format)

      - USER3_SEX=female
      - USER3_NAME=emma       # Name of the user
      - USER3_HEIGHT=150       # Height (in cm) of the user
      - USER3_DOB=${EMMA_DOB}   # DOB (in yyyy-mm-dd format)
