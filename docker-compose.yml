---

version: "3.3"
services:
  duckdns:
    image: linuxserver/duckdns
    container_name: duckdns
    environment:
      - PUID=1000  # optional
      - PGID=1000  # optional
      - TZ=${TZ}
      - SUBDOMAINS=${DOMAIN_NAMES}
      - TOKEN=${DOMAIN_TOKEN}
      - LOG_FILE=false  # optional
    volumes:
      - ${ROOT_DATA}/duckdns:/config  # optional
    restart: unless-stopped

  traefik:
    image: traefik:v2.0
    container_name: traefik
    ports:
      - "80:80"
      - "10443:443"
      - "8080:8080"  # internal dashboard
    environment:
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=${ACME_EMAIL}  # optional
    volumes:
      - ${ROOT_DATA}/letsencrypt:/letsencrypt
      - ${ROOT_DATA}/traefik:/etc/traefik
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: unless-stopped


  codeserver:
    image: linuxserver/code-server:latest
    container_name: code-server
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - PASSWORD=${CODER_PASSWORD}  # optional
    volumes:
      - ${ROOT_DATA}/code-server:/config
      - ./..:/sillyroot
    ports:
      - 8443:8443
    restart: unless-stopped


  influxdb:
    image: influxdb:1.7-alpine
    container_name: influxdb
    volumes:
      - ${ROOT_DATA}/influxdb:/var/lib/influxdb
    ports:
      - "8086:8086"
    restart: unless-stopped

  telegraf:
    image: telegraf:1.12-alpine
    container_name: telegraf
    links:
      - influxdb
    ports:
      - "6514:6514"
    environment:
      HOST_PROC: /rootfs/proc
    volumes:
      - ${ROOT_DATA}/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc:/rootfs/proc:ro
    depends_on:
      - influxdb
    restart: unless-stopped

  chronograf:
    image: chronograf:1.7-alpine
    container_name: chronograf
    volumes:
      - '${ROOT_DATA}/chronograf:/var/lib/chronograf'
    environment:
      BASE_PATH: "/chronograf"
      INFLUXDB_URL: "http://influxdb:8086"
    labels:
      traefik.enable: "true"
      traefik.http.routers.chronograf.entrypoints: "web"
      traefik.http.routers.chronograf.rule: "PathPrefix(`/chronograf`)"
      traefik.http.routers.chronograf.middlewares: "chronoauth"
      traefik.http.middlewares.chronoauth.basicauth.users: "${CHRONOGRAF_AUTH}"
    depends_on:
      - influxdb
    restart: unless-stopped


  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - UMASK_SET=022  # optional
    volumes:
      - ${ROOT_DATA}/sonarr:/config
      - ${ROOT_MEDIAS}:/data
    labels:
      traefik.enable: "true"
      traefik.http.routers.sonarr.entrypoints: "web"
      traefik.http.routers.sonarr.rule: "PathPrefix(`/sonarr`)"
      traefik.http.routers.sonarr.middlewares: "chronoauth"
    restart: unless-stopped

  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - UMASK_SET=022  # optional
    volumes:
      - ${ROOT_DATA}/radarr:/config
      - ${ROOT_MEDIAS}:/data
    labels:
      traefik.enable: "true"
      traefik.http.routers.radarr.entrypoints: "web"
      traefik.http.routers.radarr.rule: "PathPrefix(`/radarr`)"
      traefik.http.routers.radarr.middlewares: "chronoauth"
    restart: unless-stopped

  jackett:
    image: linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - RUN_OPTS=run options here  # optional
    volumes:
      - ${ROOT_DATA}/jackett:/config
      - ${ROOT_MEDIAS}:/data
    labels:
      traefik.enable: "true"
      traefik.http.routers.jackett.entrypoints: "web"
      traefik.http.routers.jackett.rule: "PathPrefix(`/jackett`)"
      traefik.http.routers.jackett.middlewares: "chronoauth"
    restart: unless-stopped

  transmission:
    image: linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${ROOT_DATA}/transmission:/config
      - ${ROOT_MEDIAS}:/data
    labels:
      traefik.enable: "true"
      traefik.http.routers.transmission.entrypoints: "web"
      traefik.http.routers.transmission.rule: "PathPrefix(`/transmission`)"
      traefik.http.routers.transmission.middlewares: "chronoauth"
    restart: unless-stopped

  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    volumes:
      - ${ROOT_DATA}/jellyfin/config:/config
      - ${ROOT_DATA}/jellyfin/cache:/cache
      - ${ROOT_MEDIAS}:/media
    labels:
      traefik.enable: "true"
      traefik.http.routers.jellyfin.entrypoints: "web"
      traefik.http.routers.jellyfin.rule: "PathPrefix(`/jellyfin`)"
      traefik.http.routers.jellyfin.middlewares: "chronoauth"
    restart: unless-stopped


  homeassistant:
    container_name: home-assistant
    image: homeassistant/home-assistant:stable
    volumes:
      - ${ROOT_DATA}/homeassistant/:/config
    network_mode: host
    environment:
      - TZ=${TZ}
    depends_on:
      - telegraf
    restart: unless-stopped

  mosquitto:
    image: eclipse-mosquitto
    container_name: mosquitto
    expose:
      - "1883"
      - "9001"
    ports:
      - "1883:1883"
      - "9001:9001"
    restart: unless-stopped

  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt
    volumes:
      - ${ROOT_DATA}/zigbee2mqtt/:/app/data
      - /run/udev:/run/udev:ro
    devices:
      - /dev/ttyACM0:/dev/ttyACM0
    restart: unless-stopped
    depends_on:
      - mosquitto
    privileged: true
    environment:
      - TZ=${TZ}

  zigbee2mqttassistant:
    container_name: zigbee2mqttassistant
    ports:
      - '8880:80'
    environment:
      - Z2MA_SETTINGS__MQTTSERVER=mosquitto
    image: carldebilly/zigbee2mqttassistant

  valetudomap:
    container_name: valetudomap
    image: bruvv/icantbelieveitsnotvaletudo
    ports:
      - '3000:3000'
    volumes:
      - ${ROOT_DATA}/valetudomap/config.json:/app/config.json
    depends_on:
      - mosquitto
    restart: unless-stopped
